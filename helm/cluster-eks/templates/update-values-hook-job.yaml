apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ include "resource.default.name" $ }}-update-values-hook"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "{{ include "resource.default.name" $ }}-update-values-hook"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
rules:
  - apiGroups: ["cluster.x-k8s.io"]
    resources: ["clusters"]
    resourceNames: ["{{ include "resource.default.name" $ }}"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["{{ include "resource.default.name" $ }}-control-plane-endpoint"]
    verbs: ["get", "patch", "create","update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ include "resource.default.name" $ }}-update-values-hook"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: "{{ include "resource.default.name" $ }}-update-values-hook"
    namespace: "{{ $.Release.Namespace }}"
roleRef:
  kind: Role
  name: "{{ include "resource.default.name" $ }}-update-values-hook"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "resource.default.name" $ }}-update-values-hook"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 86400 # 24h
  template:
    metadata:
      name: "{{ include "resource.default.name" $ }}-update-values-hook"
      namespace: "{{ $.Release.Namespace }}"
      labels:
        {{- include "labels.common" $ | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: "{{ include "resource.default.name" $ }}-update-values-hook"
      securityContext:
        runAsUser: {{ include "securityContext.runAsUser" $ }}
        runAsGroup: {{ include "securityContext.runAsGroup" $ }}
      containers:
        - name: create-cp-cm
          image: "{{ .Values.kubectlImage.registry }}/{{ .Values.kubectlImage.name }}:{{ .Values.kubectlImage.tag }}"
          command:
            - "/bin/sh"
            - "-xc"
            - |
              while [ -z "${control_plane_endpoint}" ] ; do
                control_plane_endpoint=$(kubectl get cluster -n {{ $.Release.Namespace }} {{ include "resource.default.name" $ }} -o 'jsonpath={.spec.controlPlaneEndpoint.host}')
                sleep 10
              done
              control_plane_endpoint_host=$(echo $control_plane_endpoint | cut -d\/ -f 3 )

              kubectl -n {{ $.Release.Namespace }} create configmap {{ include "resource.default.name" $ }}-control-plane-endpoint --from-literal=control_plane_endpoint_host=${control_plane_endpoint_host} --dry-run=client -o yaml | kubectl apply -f -
          securityContext:
            readOnlyRootFilesystem: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "256Mi"
              cpu: "100m"
